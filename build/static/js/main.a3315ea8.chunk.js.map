{"version":3,"sources":["redux/reducers/notesReducer.js","redux/reducers/userReducer.js","redux/reducers/rootReducer.js","redux/actions/usersActions.js","components/Navbar.js","redux/actions/notesActions.js","components/Note.js","components/Home.js","components/Login.js","components/Signup.js","components/ActiveUsers.js","App.js","serviceWorker.js","index.js"],"names":["initialState","notes","newNote","actionType","_id","notesReducer","state","action","type","filter","note","id","INITIAL_STATE","username","password","isLoggedIn","activeUsers","userReducer","combineReducers","setUsername","setIsLoggedIn","setPassword","setActiveUsers","connect","dispatch","className","to","onClick","document","cookie","getNotes","getState","axios","get","then","res","setListNotes","data","console","log","setId","setNewNote","setActionType","React","useEffect","onChange","e","target","value","placeholder","name","catch","window","location","reload","map","key","width","description","delete","params","err","options","withCredentials","preventDefault","body","md5","post","valid","counter","onSubmit","headers","for","load","Number","Navbar","path","component","Note","Login","Signup","Home","Boolean","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3315ea8.chunk.js","sourcesContent":["\nconst initialState = {\n    notes:[],\n    newNote: '',\n    actionType: 'Add',\n    _id:'',\n}\n\nconst notesReducer = (state = initialState, action) =>{\n    switch(action.type){\n        case 'SET_LIST_NOTES':\n            return {\n                ...state,\n                notes:action.notes\n            }\n        case 'SET_ACTION_TYPE':\n            return{\n                ...state,\n                actionType: action.actionType,\n            }\n        case 'DELETE_NOTE':\n            return{\n                ...state,\n                notes:state.notes.filter(note => note._id !== action.id)\n            }\n        case 'SET_NEW_NOTE':\n            return{\n                ...state,\n                newNote: action.newNote,\n            }\n        case 'SET_ID':\n            return{\n                ...state,\n                _id: action._id\n            }\n        default:\n            return state\n        }   \n}\n\nexport default notesReducer;","// Creating a reducer\r\n\r\n// Step 1 initialize state\r\nconst INITIAL_STATE = {\r\n  username: '',\r\n  password:'',\r\n  isLoggedIn: false,\r\n  activeUsers: 0,\r\n};\r\n\r\n// Step 2 create listener function\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n  // Step 3 create switch for action types\r\n  switch (action.type) {\r\n    case 'SET_ACTIVE_USERS':\r\n      return{\r\n        ...state,\r\n        activeUsers: action.activeUsers\r\n      }\r\n    case 'SET_IS_LOGGED_IN':\r\n      return {\r\n        ...state,\r\n        isLoggedIn: action.isLoggedIn,\r\n      };\r\n    case 'SET_USERNAME':\r\n      return {\r\n        ...state, // spread operator\r\n        // email: state.email,\r\n        // isLoggedIn: state.isLoggedIn,\r\n        username: action.username,\r\n      };\r\n    case 'SET_PASSWORD':\r\n      return{\r\n        ...state,\r\n        password:action.password\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// don't forget to export\r\nexport default userReducer;","import { combineReducers } from 'redux';\r\nimport notesReducer from './notesReducer.js';\r\nimport userReducer from './userReducer';\r\n\r\nexport default combineReducers({\r\n  notesReducer,\r\n  userReducer,\r\n});","\nexport const setUsername = username =>({\n    type: 'SET_USERNAME',\n    username\n})\n\nexport const setIsLoggedIn = (isLoggedIn) =>({\n    type: 'SET_IS_LOGGED_IN',\n    isLoggedIn\n})\n\n\nexport const setPassword = (password) =>({\n    type: 'SET_PASSWORD',\n    password\n})\n\nexport const setActiveUsers = (activeUsers) =>({\n    type:'SET_ACTIVE_USERS',\n    activeUsers\n})","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {Link } from \"react-router-dom\";\nimport { setIsLoggedIn, setUsername, setActiveUsers } from \"../redux/actions/usersActions\";\n\nconst NavBar = ({ dispatch, username, isLoggedIn,activeUsers }) => {\n    const handleOnClick = ()=>{\n        dispatch(setIsLoggedIn(false))\n        dispatch(setUsername(''))\n        dispatch(setActiveUsers(--activeUsers))\n        document.cookie =`loggedin=false`\n        document.cookie = `activeusers=${activeUsers}`\n        document.cookie =`username=`\n    }\n\n    return (\n        <div>\n            <nav>\n                <ul className=\"nav-links\">\n                    <Link to=\"/\">\n                        <li>Home</li>\n                    </Link>\n                    <span>Note Taking App</span>\n                    <Link to=\"/viewNotes\">\n                        <li>View All Notes</li>\n                    </Link>\n                    {!isLoggedIn ? (\n                        <>\n                            <Link to=\"/login\">\n                                <li>Login</li>\n                            </Link>\n                            <Link to=\"/register\">\n                                <li>Signup</li>\n                            </Link>\n                        </>\n                    ) : (\n                        <>\n                            <p>Hello, {username}</p>\n                            <p>\n                                <button onClick = {handleOnClick} >Log out</button>\n                            </p>\n                        </>\n                    )}\n                </ul>\n            </nav>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    username: state.userReducer.username,\n    isLoggedIn: state.userReducer.isLoggedIn,\n    activeUsers: state.userReducer.activeUsers,\n});\n\nexport default connect(mapStateToProps)(NavBar);\n","import axios from \"axios\";\r\nimport { setUsername } from \"./usersActions\";\r\n\r\nexport const getNotes = () => (dispatch, getState) => {\r\n    \r\n    axios\r\n        .get(`/notes/allNotes`)\r\n        .then(res => {\r\n            dispatch(setListNotes(res.data));\r\n        })\r\n        .then(console.log);\r\n};\r\n\r\nexport const addNote = () => (dispatch, getState) => {\r\n    const { username,newNote } = getState().notesReducer;\r\n  \r\n    axios\r\n        .get(`/notes/addNote?newNote=${newNote}`)\r\n        .then(() => {\r\n            dispatch(setUsername(username))\r\n            dispatch(setNewNote(\"\"));\r\n            dispatch(setId(\"\"));\r\n            dispatch(getNotes());\r\n        })\r\n        .catch(console.log);\r\n};\r\n\r\nexport const deleteNote = () => (dispatch, getState) => {\r\n    const { _id } = getState().notesReducer;\r\n    axios\r\n        .delete(`/notes/deleteNote/${_id}`, { params: { _id: _id } })\r\n        .then(res => {\r\n            dispatch({\r\n                type: \"DELETE_NOTE\",\r\n                _id\r\n            });\r\n            dispatch(setNewNote(\"\"));\r\n            dispatch(setId(\"\"));\r\n            dispatch(getNotes());\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n};\r\n\r\nexport const updateNote = () => (dispatch,getState) =>{\r\n    const {_id,newNote} = getState().notesReducer\r\n    axios.get(`/notes/update?id=${_id}&newNote=${newNote}`)\r\n    .then(()=>{\r\n        dispatch(setActionType('Add'))\r\n        dispatch(setNewNote(''))\r\n        dispatch(setId(''))\r\n        dispatch(getNotes())\r\n    })\r\n}\r\n\r\nexport const setListNotes = notes => ({\r\n    type: \"SET_LIST_NOTES\",\r\n    notes\r\n});\r\n\r\nexport const setId = _id => ({\r\n    type: \"SET_ID\",\r\n    _id\r\n});\r\n\r\nexport const setNewNote = newNote => ({\r\n    type: \"SET_NEW_NOTE\",\r\n    newNote\r\n});\r\n\r\nexport const setActionType = (actionType) =>({\r\n    type: 'SET_ACTION_TYPE',\r\n    actionType,\r\n})\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    getNotes,\n    addNote,\n    deleteNote,\n    updateNote,\n    setId,\n    setNewNote,\n    setActionType\n} from \"../redux/actions/notesActions\";\n\nconst Note = ({\n    isLoggedIn,\n    dispatch,\n    username,\n    notes,\n    newNote,\n    actionType,\n    _id\n}) => {\n    React.useEffect(() => {\n        dispatch(getNotes());\n    }, [dispatch]);\n\n    const handleOnClick = () => {\n        if (actionType === \"Edit\") {\n            return dispatch(updateNote());\n        }\n        return dispatch(addNote(username, newNote),window.location.reload());\n    };\n\n    return (\n        <div>\n            {!isLoggedIn && (\n                <>\n                    <p>\n                        You need access to view all notes or add a note. Please\n                        log in or Sign up\n                    </p>\n                </>\n            )}\n            <div>\n                <h1>Make a new note!</h1>\n                <input\n                    onChange={e => dispatch(setId(e.target.value))}\n                    type=\"text\"\n                    value={_id}\n                    placeholder=\"enter id here\"\n                ></input>\n                <input\n                    onChange={e => dispatch(setNewNote(e.target.value))}\n                    name=\"description\"\n                    placeholder=\"enter new note here\"\n                    value={newNote}\n                    type=\"text\"\n                ></input>\n\n                <button onClick={handleOnClick} type=\"button\">\n                    {actionType} Note\n                </button>\n            </div>\n            <table>\n                <tbody>\n                    <tr>\n                        <th>id</th>\n                        <th>Description</th>\n                        <th>User</th>\n                        <th>Actions</th>\n                    </tr>\n                    {notes.map(note => (\n                        <tr key={note._id}>\n                            <td width=\"35%\">{note._id}</td>\n                            <td width=\"50%\">{note.description}</td>\n                            <td width=\"10%\"></td>\n                            <td width=\"5%\">\n                                <button\n                                    onClick={() => {\n                                        dispatch(setActionType(\"Edit\"));\n                                        dispatch(setId(note._id));\n                                        dispatch(setNewNote(note.description));\n                                    }}\n                                >\n                                    Edit\n                                </button>\n                                <button\n                                    onClick={() => {\n                                        dispatch(setId(note._id));\n                                        dispatch(deleteNote(note._id));\n                                    }}\n                                >\n                                    Delete\n                                </button>\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst mapStatetoProps = state => ({\n    username: state.userReducer.username,\n    notes: state.notesReducer.notes,\n    actionType: state.notesReducer.actionType,\n    _id: state.notesReducer._id,\n    newNote: state.notesReducer.newNote,\n    isLoggedIn: state.userReducer.isLoggedIn\n});\n\nexport default connect(mapStatetoProps)(Note);\n","import React from 'react'\nimport {connect} from 'react-redux'\n\n\n\nconst Home = ({username}) =>{\n\n    return(\n        <div>\n            <h1>Welcome {username}!</h1>\n            <p>This is a note taking application for CSC 667 Homework 3</p>\n        </div>\n    )\n}\nconst mapStateToProps = state =>({\n    username: state.userReducer.username\n})\n\nexport default connect(mapStateToProps)(Home);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport md5 from \"md5\";\r\nimport axios from \"axios\";\r\nimport { setIsLoggedIn, setUsername, setPassword, setActiveUsers } from \"../redux/actions/usersActions\";\r\n\r\nconst options = {\r\n    withCredentials: true\r\n};\r\n\r\nconst Login = ({ dispatch, username, password, isLoggedIn }) => {\r\n\r\n    const validate = (e) => {\r\n        e.preventDefault()\r\n        const body = {\r\n            username,\r\n            password: md5(password)\r\n        };\r\n        axios.post(\"/authserver/login\", body, options).then(res => {\r\n            if (res.data.valid) {\r\n                dispatch(setIsLoggedIn(true));\r\n                dispatch(setActiveUsers(res.data.counter))\r\n                document.cookie = `username=${username}`;\r\n                document.cookie = `activeusers=${res.data.counter}`\r\n                document.cookie = `password=${md5(password)}`;\r\n                document.cookie = `loggedin=true`;\r\n\r\n            } else {\r\n                dispatch(setIsLoggedIn(false));\r\n                document.cookie = `username=`;\r\n                document.cookie = `password=`;\r\n                document.cookie = `loggedin=false`;\r\n                console.log(\"Invalid user credentials\");\r\n            }\r\n            console.log(res)\r\n        })\r\n        .catch(console.log())\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {isLoggedIn && <Redirect to=\"/\" />}\r\n            <form>\r\n                <div>\r\n                    <p>Username:</p>\r\n                    <input name=\"username\" type=\"text\" onChange={(e)=>dispatch(setUsername(e.target.value))}></input>\r\n                </div>\r\n\r\n                <div>\r\n                    <p>Password</p>\r\n                    <input name=\"password\" type=\"text\" onChange={(e)=>dispatch(setPassword(e.target.value))}></input>\r\n                </div>\r\n\r\n                <button onClick={validate} type=\"button\">\r\n                    LOGIN\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    username: state.userReducer.username,\r\n    password: state.userReducer.password,\r\n    isLoggedIn: state.userReducer.isLoggedIn\r\n});\r\n\r\nexport default connect(mapStateToProps)(Login);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {\r\n    setUsername,\r\n    setPassword,\r\n    setIsLoggedIn,\r\n} from \"../redux/actions/usersActions\";\r\nimport axios from \"axios\";\r\nimport md5 from \"md5\";\r\n\r\nconst Signup = ({ dispatch, username, password, isLoggedIn }) => {\r\n    const handleOnSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const body = {\r\n            username,\r\n            password: md5(password)\r\n        };\r\n\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            withCredentials: true\r\n        };\r\n\r\n        axios\r\n            .post(\"/authserver/addUser\", body, config)\r\n            .then(res => {\r\n                dispatch(setIsLoggedIn(true));\r\n                document.cookie = `username=${username}`;\r\n                document.cookie = `activeusers=${res.data.counter}`\r\n                document.cookie = `password=${md5(password)}`;\r\n                document.cookie = `loggedin=true`;\r\n\r\n            })\r\n            .catch(e => {\r\n                dispatch(setIsLoggedIn(false));\r\n                document.cookie = `username=`;\r\n                document.cookie = `password=`;\r\n                document.cookie = `loggedin=false`;\r\n\r\n                console.log(\"Invalid user credentials\");\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {isLoggedIn && <Redirect to=\"/\" />}\r\n            <p>Create an account!</p>\r\n            <form onSubmit={handleOnSubmit}>\r\n                <label for=\"\">Username:</label>\r\n                <input\r\n                    onChange={e => dispatch(setUsername(e.target.value))}\r\n                    name=\"username\"\r\n                    type=\"text\"\r\n                ></input>\r\n                <br /> \r\n                <label for=\"\">Password:</label>\r\n                <input\r\n                    onChange={e => dispatch(setPassword(e.target.value))}\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                ></input>\r\n                <br />\r\n                <button type=\"submit\">JOIN</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoggedIn: state.userReducer.isLoggedIn,\r\n    username: state.userReducer.username,\r\n    password: state.userReducer.password\r\n});\r\n\r\nexport default connect(mapStateToProps)(Signup);\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst ActiveUsers = ({activeUsers}) => {\n    \n    return (\n        <div>\n            <p>Active users: {activeUsers}</p>\n        </div>\n    );\n};\nconst mapStateToProps = state => ({\n    username: state.userReducer.username,\n    activeUsers: state.userReducer.activeUsers,\n    password: state.userReducer.password,\n\n});\n\nexport default connect(mapStateToProps)(ActiveUsers);\n","import React from \"react\";\nimport Navbar from './components/Navbar'\nimport Note from './components/Note'\nimport Home from './components/Home'\nimport Login from './components/Login'\nimport Signup from './components/Signup'\nimport { Switch, Route } from \"react-router-dom\";\nimport cookie from 'react-cookies'\nimport {connect} from 'react-redux'\nimport \"./App.css\";\nimport ActiveUsers from \"./components/ActiveUsers\";\nimport { setIsLoggedIn, setUsername, setActiveUsers } from \"./redux/actions/usersActions\";\n\nconst App = ({dispatch,isLoggedIn,username}) => {\n\n  React.useEffect(()=>{\n    const username = cookie.load('username')\n    const isLoggedIn = cookie.load('loggedin') ===\"true\"\n    const activeUsers = Number(cookie.load('activeusers'))\n    dispatch(setIsLoggedIn(isLoggedIn))\n    dispatch(setUsername(username))\n    dispatch(setActiveUsers(activeUsers))\n  },[dispatch])\n\n  return (\n    <div className=\"App\">\n      <ActiveUsers />\n      <Navbar/>\n      <Switch>\n        <Route path=\"/viewNotes\" component={Note}/>\n        <Route path=\"/login\" component={Login}/>\n        <Route path=\"/register\" component={Signup}/>\n        <Route path=\"/\" component={Home}/>\n      </Switch>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  username: state.userReducer.username,\n  isLoggedIn: state.userReducer.isLoggedIn,\n})\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./redux/reducers/rootReducer\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}