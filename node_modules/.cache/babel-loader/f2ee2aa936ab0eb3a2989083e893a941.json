{"ast":null,"code":"import _defineProperty from \"/home/angelo/Desktop/internetappanddesign/hw3-stephcurry3/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Creating a reducer\n// Step 1 initialize state\nconst INITIAL_STATE = {\n  username: '',\n  password: '',\n  isLoggedIn: false\n}; // Step 2 create listener function\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  // Step 3 create switch for action types\n  switch (action.type) {\n    case 'SET_IS_LOGGED_IN':\n      return _objectSpread({}, state, {\n        isLoggedIn: action.isLoggedIn\n      });\n\n    case 'SET_USERNAME':\n      return _objectSpread({}, state, {\n        // spread operator\n        // email: state.email,\n        // isLoggedIn: state.isLoggedIn,\n        username: action.username\n      });\n\n    case 'SET_PASSWORD':\n      return _objectSpread({}, state, {\n        password: action.password\n      });\n\n    default:\n      return state;\n  }\n}; // don't forget to export\n\n\nexport default userReducer;","map":{"version":3,"sources":["/home/angelo/Desktop/internetappanddesign/hw3-stephcurry3/src/redux/reducers/userReducer.js"],"names":["INITIAL_STATE","username","password","isLoggedIn","userReducer","state","action","type"],"mappings":";;;;;;AAAA;AAEA;AACA,MAAMA,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE,EADU;AAEpBC,EAAAA,QAAQ,EAAC,EAFW;AAGpBC,EAAAA,UAAU,EAAE;AAHQ,CAAtB,C,CAMA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,aAAT,EAAwBM,MAAxB,KAAmC;AACrD;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACE,+BACKF,KADL;AAEEF,QAAAA,UAAU,EAAEG,MAAM,CAACH;AAFrB;;AAIF,SAAK,cAAL;AACE,+BACKE,KADL;AACY;AACV;AACA;AACAJ,QAAAA,QAAQ,EAAEK,MAAM,CAACL;AAJnB;;AAMF,SAAK,cAAL;AACE,+BACKI,KADL;AAEEH,QAAAA,QAAQ,EAACI,MAAM,CAACJ;AAFlB;;AAIF;AACE,aAAOG,KAAP;AAnBJ;AAqBD,CAvBD,C,CAyBA;;;AACA,eAAeD,WAAf","sourcesContent":["// Creating a reducer\r\n\r\n// Step 1 initialize state\r\nconst INITIAL_STATE = {\r\n  username: '',\r\n  password:'',\r\n  isLoggedIn: false,\r\n};\r\n\r\n// Step 2 create listener function\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n  // Step 3 create switch for action types\r\n  switch (action.type) {\r\n    case 'SET_IS_LOGGED_IN':\r\n      return {\r\n        ...state,\r\n        isLoggedIn: action.isLoggedIn,\r\n      };\r\n    case 'SET_USERNAME':\r\n      return {\r\n        ...state, // spread operator\r\n        // email: state.email,\r\n        // isLoggedIn: state.isLoggedIn,\r\n        username: action.username,\r\n      };\r\n    case 'SET_PASSWORD':\r\n      return{\r\n        ...state,\r\n        password:action.password\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// don't forget to export\r\nexport default userReducer;"]},"metadata":{},"sourceType":"module"}